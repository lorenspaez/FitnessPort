    // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  userName String @unique
  name String
  rut String @unique
  hash String

  clientes Customer[] 
  ingresos Ingreso[]
  pagos Pago[]
  fichas Sheet[]
  
  @@map("users")
}

model Customer{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String?
  name String
  nationality String?
  rut String @unique
  birthday String?
  address String?
  city String?
  phone String?
  planType String?
  observation String?
  objective String?
  agreement String?
  adminId Int?
  adminName String?
  admin User? @relation(fields: [adminId], references: [id])
  ingresos Ingreso[]
  pagos Pago[]
  fichas Sheet[]
  isActive Boolean @default(false)

  @@map("customers")
}

model Ingreso{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customerId Int?
  customerRut String
  customerName String?
  correctAccess Boolean?
  adminId Int?
  adminName String?
  admin User? @relation(fields: [adminId], references: [id])
  author Customer? @relation(fields: [customerId], references: [id])
  @@map("ingresos")
}

model Sheet{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId Int?
  customerRut String
  customerName String?

  sexo String?
  edad String?
  peso String?
  estatura String?
  imc String?
  porcGrasa String?
  porcMusculo String?
  grasaVisceral String?
  calorias String?
  fechaControl String?

  adminId Int?
  adminName String?

  admin User? @relation(fields: [adminId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  @@map("sheets")
}

model Pago{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId Int?
  customerRut String
  customerName String?
  customerPlan String?
  customerAgreement String?

  planPagado String?
  fechaPago String?
  montoPagado String?
  medioPago String?
  descuentoEmpresa String?
  vencimientoPago String?
  adminId Int?
  adminName String?

  admin User? @relation(fields: [adminId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  @@map("pagos")
}